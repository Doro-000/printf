#include "holberton.h"
/**
 * convert - prints a binary to stdout;
 * @num: number given
 * @count: base whated
 *
 * Return: ptr to string
 */

char *convert(unsigned int num, int base) 
{ 
    static char Representation[]= "0123456789ABCDEF";
    static char buffer[50];
    char *ptr;

    ptr = &buffer[49];
    *ptr = '\0';

    do
    { 
        *--ptr = Representation[num % base]; 
        num /= base; 
    }while(num != 0);

    return(ptr);
}

/**
 * print_octal - prints an octal to stdout;
 * @args: variable arguments passed to _printf
 * @count: int to be used by print, see description for print in helpers.c
 *
 * Return: void
 */
void print_octal(va_list args, int *count)
{
	char *octal_string;
	unsigned int num = va_arg(args, unsigned int);

	octal_string = malloc(sizeof(char) * (_numlen(num, 8) + 1));
	if (octal_string != NULL)
	{
		_itoa(num, octal_string, 8);
	}
	else
		exit(-1);
	print(octal_string, count);
	free(octal_string);
}

/**
 * print_rev - reverses and prints a string to stdout;
 * @args: variable arguments passed to _printf
 * @count: int to be used by print, see description for print in helpers.c
 *
 * Return: void
 */

void print_rev(va_list args, int *count)
{
	char *rev_string;

	rev_string = va_arg(args, char *);
	if (rev_string != NULL)
	{
		reverse_string(rev_string, _strlen(rev_string));
		print(rev_string, count);
	}
	else
		exit(-1);
	free(rev_string);
}
